name: üöÄ Deploy Laravel + React to Namecheap via FTP

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: üßæ Checkout repository
        uses: actions/checkout@v3

      # Step 2: Debug - Show current app.jsx content
      - name: üîç Debug - Check Current App.jsx
        run: |
          echo "=== Current app.jsx content ==="
          cat resources/js/app.jsx
          echo "=== End of app.jsx ==="

      # Step 3: Setup Node.js for React build
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Step 4: Install and build React frontend
      - name: üß± Build React frontend
        run: |
          cd resources/js
          npm install
          npm run build
          echo "‚úÖ React build completed"

      # Step 5: Debug - Verify build output
      - name: üîç Debug - Verify Build Files
        run: |
          echo "=== Checking if build directory exists ==="
          ls -la public/ | grep build || echo "No build directory found"
          
          echo "=== Build directory contents ==="
          ls -la public/build/ 2>/dev/null || echo "Cannot access build directory"
          
          echo "=== Built JavaScript files ==="
          find public/build -name "*.js" -type f 2>/dev/null | head -10 || echo "No JS files found"
          
          echo "=== Manifest file (if exists) ==="
          cat public/build/manifest.json 2>/dev/null || echo "No manifest file"

      # Step 6: Setup PHP for Laravel
      - name: üß© Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      # Step 7: Install Composer dependencies FIRST
      - name: üì¶ Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader

      # Step 8: Create .env file (AFTER composer install)
      - name: üîß Setup Environment
        run: |
          cp .env.example .env
          # Set basic config without database operations
          sed -i 's/APP_DEBUG=.*/APP_DEBUG=false/' .env
          sed -i 's/APP_ENV=.*/APP_ENV=production/' .env

      # Step 9: Deploy to FTP
      - name: üöÄ Deploy to FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ftp.asktechnologies.net
          username: askftp@asktechnologies.net
          password: ${{ secrets.FTP_PASSWORD }}
          port: 21
          protocol: ftp
          passive: true
          local-dir: ./
          server-dir: /home/
          state-name: .ftp-deploy-sync-state.json
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/**
            **/vendor/**
            **/storage/**
            **/.env.example
            **/README.md
            **/resources/js/node_modules/

      # Step 10: Final debug instructions
      - name: ‚úÖ Deployment Debug Complete
        run: |
          echo "üöÄ Deployment finished!"
          echo " "
          echo "üîç DEBUG INSTRUCTIONS:"
          echo "1. Check GitHub Actions logs above for:"
          echo "   - Your current app.jsx content"
          echo "   - If build files were created"
          echo "   - What JS files were built"
          echo " "
          echo "2. After deployment, manually check:"
          echo "   - FTP: /home/resources/js/app.jsx - is it updated?"
          echo "   - FTP: /home/public/build/ - are there new files?"
          echo " "
          echo "3. Browser steps:"
          echo "   - Hard refresh: Ctrl+Shift+R"
          echo "   - Check Console for errors (F12)"
          echo "   - Check Network tab for loaded JS files"